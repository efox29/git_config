[alias]
	au = add -u  ; add updated (or changed)
# cleaning / house keeping
	clense = "!f() { ~/git_config/tidy.sh ; }; f"
	tidy = clense
	brc = fetch -p ; 
	;brr = branch reset to remote. It forces the local branch to be exactly like remote.
	brr = "!read -p 'Are you sure you want to override local branch with remote? (y/n): ' yn; if [[ $yn == 'y' ]]; then git fetch origin && git reset --hard origin/$(git symbolic-ref --short HEAD); else echo 'Operation cancelled'; fi"
# clone stuff
	cl = clone
	clr = clone --recurse-submodules

#submodules
	sma = submodule add ; submodule add
	smu = submodule update
	smi = submodule update --init ; 
	sml = "!f() { git submodule foreach \"(git checkout master; git pull)\";}; f" ; checkout master and update to lastest for each submod
	smd = submodule deinit ; denit submodule if possible
	smdd = submodule denit --force ; forcefully remove submodule
# checkout 
	co = switch
	cot = checkout ; checkout tag - but can also be used for commits
	coc = cot ; checkout commit, but this is just a naming thing, at the end of the day its really just checkout
	cof = cot ; checkout file, this is just resets the file - there is another way of doing this though.
	rf = restore ; this is the new way of restoring a file.
	ec = config --global -e ; modify global config file
	cob = checkout -b
	st = status
# remote stuff
    rv = remote -v ; view remote urls
    pr = remote prune origin
# merge
	mnob = merge --ff-only ; merge no branch
	myesb = merge --no-ff ; merge yes branch

# push
	pushf = push --force

# commit
	cam = commit -am ; commit all with message
	cm = commit -m ; commit with message

# commit ammend
	amendunm = !git add -u && git commit --amend --no-edit; add updated and ammend with no msg
	amendnm = commit --amend --no-edit
	amendum = !git add -u && git commit --amend ; add updated and amend last commit with msg
	amend = commit --amend
	ac = "!f() { git add $1 && git commit; }; f" ; add file ($1) and then commit
	acm ="!f() { git add $1 && git commit -m \"$2\"; }; f "  ; add file ($1) and then commmit w/ msg ($2)

# rebase / writing history
	ri = rebase -i ; rebase interactive
	ap = add -p ; patch mode 

# tag stuff
	tagld = tag --delete ; tag local delete
	tagrd = push --delete origin ; tag remote delete
	taglrd = "!f() { git tagld $1 && git tagrd $1; }; f" ; local and remote tag deletion
	tagp = push --tags ; tag push
	taga = tag -a ; annotated tag 
	tagam = "!f() { git tag -a $1 $2; }; f" ; annotated tag w/ msg. [tag name and then message within " ")
 	pt = push origin ; pushes tag to origin	
	tagw = for-each-ref refs/tags ; tag what - shows which tags are annoted or commits
# branch stuff
	brd = branch -d ; branch delete if merged only
	brD = branch -D ; delete branch even if not merged
	br = branch -a
	brlrd = "!f() { git branch -d $1 && git push origin --delete $1; }; f" ; local nd remote branch delete
	brrd = push origin --delete ; delete remote branch

# work tree stuff
	wa = "!f() { git worktree add -b $1 $1; }; f" ; add a worktree with the branch name same as folder
        wd =  worktree remove ; worktree remove removes the folder and references to the worktree
	wl =  worktree list ; lists all the worktrees
# diff stuff
	difffo = diff --name-status ; diff file only shows just the files that were changed between two commits
# view files
	tracked = ls-tree -r HEAD --name-only ; show all files that are tracked in current branch
	changed = "!f() { git --no-pager diff --name-only; }; f"  ; shows which files were changed
# log output
	lgfc = log --stat
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg = !"git lg1"
	# lists commits in short form
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%C(green)\\ [%cn]" --decorate
	# show changed files 
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --numstat
	# show commits with date where you specify the last number of commits to show with a -n  ex. git lds -10 would show last 10 commits
	lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --decorate --date=short
